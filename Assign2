//Assignment2
1.Pascal's traingle
def pascals_triangle(rows):
    for i in range(rows):
        row = [1]  
        for j in range(1, i+1):
            row.append(row[j-1] * (i-j+1) // j)
        print(" " * (rows - i), " ".join(map(str, row)))

pascals_triangle(5)

2.Continue Statement Explaination
The continue statement skips the current iteration of a loop and moves to the next iteration. It is useful when certain conditions need to be avoided while iterating.
For Example:-
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
for num in numbers:
    if num % 3 != 0:
        continue
    print(num)

3. Pythagorean Triplets Using List Comprehension
triplets = [(a, b, c) for a in range(1, 51) for b in range(a, 51) for c in range(b, 51) if a**2 + b**2 == c**2]
print(triplets)

4. Maximum Sum of K Consecutive Elements
def max_consecutive_sum(nums, k):
    max_sum = sum(nums[:k])
    current_sum = max_sum
    for i in range(len(nums) - k):
        current_sum = current_sum - nums[i] + nums[i + k]
        max_sum = max(max_sum, current_sum)
    return max_sum

print(max_consecutive_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))

5. List Modification Inside a Function
def modify_list(lst):
    lst.append(100)
    print("Inside function:", lst)

my_list = [1, 2, 3]
modify_list(my_list)
print("Outside function:", my_list)

6. Fibonacci Sequence Using User-defined Function
def fibonacci(n):
    fib_series = [0, 1]
    for _ in range(n - 2):
        fib_series.append(fib_series[-1] + fib_series[-2])
    return fib_series[:n]

num = int(input("Enter number of terms: "))
print(fibonacci(num))
